package ooprogAct;

import java.util.*;

class InsufficientStockException extends Exception {
    public InsufficientStockException(String message) {
        super(message);
    }
}

class InvalidQuantityException extends Exception {
    public InvalidQuantityException(String message) {
        super(message);
    }
}


public class product {
    private String productId;
    private String productName;
    private int quantity;
    private double price;

    public product(String productId, String productName, int quantity, double price) {
        this.productId = productId;
        this.productName = productName;
        this.quantity = quantity;
        this.price = price;
    }

    public String getProductId() {
        return productId;
    }

    public String getProductName() {
        return productName;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

   
    class PerishableProduct extends product {
        private String expirationDate;

        public PerishableProduct(String productId, String productName, int quantity, double price, String expirationDate) {
            super(productId, productName, quantity, price);
            this.expirationDate = expirationDate;
        }

        public String getExpirationDate() {
            return expirationDate;
        }

        public void setExpirationDate(String expirationDate) {
            this.expirationDate = expirationDate;
        }

        public void updateStock(int amount) throws Exception {
            if (amount < 0) {
                throw new InvalidQuantityException("Quantity cannot be negative.");
            }
            if (getQuantity() + amount > 100) {
                throw new Exception("Cannot exceed maximum quantity of 100 for perishable products.");
            }
            setQuantity(getQuantity() + amount);
            System.out.println("Stock updated: " + getProductName() + ", New Quantity: " + getQuantity());
        }
    }

    
    class NonPerishableProduct extends product {
        private int shelfLife;

        public NonPerishableProduct(String productId, String productName, int quantity, double price, int shelfLife) {
            super(productId, productName, quantity, price);
            this.shelfLife = shelfLife;
        }

        public int getShelfLife() {
            return shelfLife;
        }

        public void setShelfLife(int shelfLife) {
            this.shelfLife = shelfLife;
        }

        public void updateStock(int amount) throws Exception {
            if (getQuantity() + amount < 0) {
                throw new InsufficientStockException("Insufficient stock for product " + getProductName());
            }
            setQuantity(getQuantity() + amount);
            System.out.println("Stock updated: " + getProductName() + ", New Quantity: " + getQuantity());
        }
    }

   
    abstract class InventoryOperation {
        public abstract void addProduct(product product);
        public abstract void removeProduct(String productId) throws InsufficientStockException;
    }

   
    class Inventory extends InventoryOperation {
        ArrayList<product> prods = new ArrayList<>();

        @Override
        public void removeProduct(String productId) throws InsufficientStockException {
            for (product product : prods) {
                if (product.getProductId().equals(productId)) {
                    prods.remove(product);
                    System.out.println("Product removed: " + productId);
                    return;
                }
            }
            throw new InsufficientStockException("Product not found: " + productId);
        }

        @Override
        public void addProduct(product product) {
            prods.add(product);
            throw new UnsupportedOperationException("Unimplemented method 'addProduct'");
        }
    }

    
}


